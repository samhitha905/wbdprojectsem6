openapi: 3.0.0
info:
  version: 1.0.0
  title: Subscribe2Get
  description: Subscription of newspapers and magazines

servers:
  - url: http://localhost:3001/
tags:
  - name: Newspapers
    description: API to manage the newspapers.
  - name: Magazines
    description: API to manage the magazines.
  - name: Users
    description : API to manage registered users.
  - name: Orders
    description: API to manage orders.
  - name: Reviews
    description: API to manage reviews.   
  - name: Blogs
    description: API to manage blogs
  - name: Feedbacks
    description: API to store users feedback

paths:
  /newspapers:
    get:
      summary: Lists all newspapers
      tags: [Newspapers]
      responses:
        "200":
          description: The list of newspapers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Newspaper'
    
    post:
      summary: Creates a newspaper
      tags: [Newspapers]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Newspaper'
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes all newspapers
      tags: [Newspapers]
      responses:
        '200':
          description: Newspapers are deleted.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Newspaper'

  /newspapers/{paperId}:
    get:
      summary: Returns a newspaper by paperId.
      tags: [Newspapers]
      parameters:
        - name: paperId
          in: path
          required: true
          description: Autogenerated paperId by MongoDB
          schema:
            type : string
      responses: 
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Newspaper'
    put:
      summary: Updates a newspaper by paperId
      tags: [Newspapers]
      parameters:
        - name: paperId
          in: path
          required: true
          description: Autogenerated paperId by MongoDB
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Newspaper'
      responses:
        '200':
          description: Updated
    delete:
      summary: Deletes a particular newspaper.
      tags: [Newspapers]
      parameters:
        - name: paperId
          in: path
          required: true
          description: Autogenerated paperId by MongoDB
          schema:
            type : string
      responses:
        '200':
          description: Deleted newspaper.

  /reviews:
    get:
      summary: Lists all reviews.
      tags: [Reviews]
      responses:
        "200":
          description: The list of reviews.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reviews'
        "404":
          description: Reviews not found.
    
    post:
      summary: Creates a review.
      tags: [Reviews]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reviews'
      responses:
        '201':
          description: Review created!
    delete:
      summary: Deletes all reviews.
      tags: [Reviews]
      responses:
        '200':
          description: Reviews are deleted.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Reviews'

  /reviews/{rvwId}:
    get:
      summary: Returns a particular review.
      tags: [Reviews]
      parameters:
        - name: rvwId
          in: path
          required: true
          description: Autogenerated reviewId by MongoDB
          schema:
            type : string
      responses: 
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reviews'
    put:
      summary: Updates a review.
      tags: [Reviews]
      parameters:
        - name: rvwId
          in: path
          required: true
          description: Autogenerated reviewId by MongoDB
          schema:
            type : string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reviews'
      responses:
        '200':
          description: Updated review
    delete:
      summary: Deletes a particular review.
      tags: [Reviews]
      parameters:
        - name: rvwId
          in: path
          required: true
          description: Autogenerated reviewId by MongoDB
          schema:
            type : string
      responses:
        '200':
          description: Deleted a review.
  /magazines:
    get:
      summary: Lists all magazines
      tags: [Magazines]
      responses:
        "200":
          description: The list of magazines.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Magazine'
    
    post:
      summary: Creates a magazine
      tags: [Magazines]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Magazine'
      responses:
        '201':
          description: Created

    delete:
      summary: Deletes all magazines
      tags: [Magazines]
      responses:
        '200':
          description: Magazines are deleted.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Magazine'

  /magazines/{magId}:
    get:
      summary: Returns a magazine by magId.
      tags: [Magazines]
      parameters:
        - name: magId
          in: path
          required: true
          description: Autogenerated magId by MongoDB
          schema:
            type : string
      responses: 
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Magazine'
    
    put:
      summary: Updates a magazine by magId
      tags: [Magazines]
      parameters:
        - name: magId
          in: path
          required: true
          description: Autogenerated magId by MongoDB
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Magazine'
      responses:
        '200':
          description: Updated
    
    delete:
      summary: Deletes a particular magazine.
      tags: [Magazines]
      parameters:
        - name: magId
          in: path
          required: true
          description: Autogenerated magId by MongoDB
          schema:
            type : string
      responses:
        '200':
          description: Deleted magazine.  
  /users:
    get : 
      summary: Lists all Users
      tags: [Users]
      responses:
        "200":
          description: The list of users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    
    post:
      summary: Creates an user
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Created
        '404' :
          description: Username already exists
 
    delete : 
      summary: Deletes all users
      tags: [Users]
      responses:
        '200':
          description: Users are deleted.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/User'

  /users/{username}:
    get:
      summary: Returns a user by username.
      tags: [Users]
      parameters:
        - name: username
          in: path
          required: true
          description: username created by user
          schema:
            type : string
      responses: 
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found.
    
    put:
      summary: Updates username by given username
      tags: [Users]
      parameters:
        - name: username
          in: path
          required: true
          description: username created by user
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Updated
        '404':
          description: User not found or new username is already existing.

    delete:
      summary: Deletes a particular user.
      tags: [Users]
      parameters:
        - name: username
          in: path
          required: true
          description: username created by user
          schema:
            type : string
      responses:
        '200':
          description: Deleted user.
        '404':
          description : Username not found

  /users/login:
    post:
      summary: Checks an user
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Credentials true
        '404' :
          description: Incorrect credentials
          
  /orders:
    get:
      summary: Lists of all orders
      tags: [Orders]
      
      responses:
        "200":
          description: The list of orders.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Orders'
    
    post:
      summary: Creates an order
      tags: [Orders]
      requestBody:
        required: true
        content:
          application/json:
            schema:  
              $ref: '#/components/schemas/Orders'
      responses:
        '201':
          description: Created

  /orders/{orderId}:
    get:
      summary: get single order
      tags: [Orders]
      parameters:
        - name: orderId
          in: path
          required: true
          description: Autogenerated orderId by MongoDB
          schema:
            type : string
      responses:
        "200":
          description: single order.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Orders'

    delete:
      summary: Deletes a particular order.
      tags: [Orders]
      parameters:
        - name: orderId
          in: path
          required: true
          description: Auto generated orderId by Mongodb
          schema:
            type : string
      responses:
        '200':
          description: Deleted user.
        '404':
          description : orderId not found            



  /orders/{orderId}/{itemId}:
    get:
      summary: get single item in placed order
      tags: [Orders]
      parameters:
        - name: orderId
          in: path
          required: true
          description: Autogenerated orderId by MongoDB
          schema:
            type : string
        - name: itemId
          in: path
          required: true
          description: Autogenerated itemId by MongoDB
          schema:
            type : string

      responses:
        "200":
          description: single order.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Orders'

    delete:
      summary: Deletes a particular item of an order.
      tags: [Orders]
      parameters:
        - name: orderId
          in: path
          
          required: true
          description: Autogenerated orderId by MongoDB
          schema:
            type : string
        - name: itemId
          in: path
          required: true
          description: Autogenerated itemId by MongoDB
          schema:
            type : string
      responses:
        '200':
          description: Deleted review of a magazine.
        '404': 
          description: Magazine or review not found.
                    


  
  /blogs:
    get:
      summary: Lists all blogs
      tags: [Blogs]
      responses:
        "200":
          description: The list of blogs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
    
    post:
      summary: Creates a blog
      tags: [Blogs]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Blog'
      responses:
        '201':
          description: Created
    
    delete:
      summary: Deletes all blogs
      tags: [Blogs]
      responses:
        '200':
          description: Blogs are deleted.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Blog'

  /blogs/{blgId}:
    get:
      summary: Returns a newspaper by blogId.
      tags: [Blogs]
      parameters:
        - name: blogId
          in: path
          required: true
          description: Autogenerated blogId by MongoDB
          schema:
            type : string
      responses: 
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
    
    put:
      summary: Updates a blog by blogId
      tags: [Blogs]
      parameters:
        - name: blogId
          in: path
          required: true
          description: Autogenerated blogId by MongoDB
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Blog'
      responses:
        '200':
          description: Updated
    
    delete:
      summary: Deletes a particular blog.
      tags: [Blogs]
      parameters:
        - name: blogId
          in: path
          required: true
          description: Autogenerated blogId by MongoDB
          schema:
            type : string
      responses:
        '200':
          description: Deleted Blog.

  /feedbacks:
    get:
      summary: Lists feedback of all users
      tags: [Feedbacks]
      responses:
        "200":
          description: Feedback list.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feedback'
    
    post:
      summary: Posts feedback
      tags: [Feedbacks]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Feedback'
      responses:
        '201':
          description: Created
    
  /feedbacks/{feedId}:
    put:
      summary: Updates feedback by feedback ID
      tags: [Feedbacks]
      parameters:
        - name: feedId
          in: path
          required: true
          description: Autogenerated id by mongoDB
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Feedback'
      responses: 
        '200':
          description: Feedback updated
      
      

components:
  schemas:
    Newspaper:
      type: object
      required:
        - name
        - description
        - image
        - language
        - price
        - featured
        - reviews
      properties:
        id:
          type: string 
          description: The auto-generated id of the newspaper.
        name:
          type: string
          description: The name of the newspaper.
        description:
          type: string
          description: The details of newpaper.
        image:
          type: string
          description: Url of the image of newspaper.
        language:
          type: string
          description: Language of newspaper.
        price:
          type: number 
          description: The price of newspaper.
        featured:
          type: boolean
          description: flag.
        reviews:
          $ref: "#/components/schemas/Reviews"
          description: All reviews of the newspaper.
        
      example:
        name: Eenadu
        description: Eenadu is the largest circulated Telugu-language daily newspaper of India sold mostly in the states of Andhra Pradesh and Telangana. According to the Indian Readership Survey (IRS) Q2 2019, Eenadu ranks eighth among the most circulated Indian-language dailies with a total readership (TR) of 1,614,105. It was founded by Ramoji Rao in 1974.
        image: assets/images/Eenadu.jpg
        language: Telugu
        price: 195
        featured: true
        reviews: []

    Magazine:
      type: object
      required:
        - name
        - description
        - image
        - language
        - price
        - featured
        - category
        - reviews
      properties:
        id:
          type: string 
          description: The auto-generated id of the magazine.
        name:
          type: string
          description: The name of the magazine.
        description:
          type: string
          description: The details of magazine.
        image:
          type: string
          description: Url of the image of magazine.
        language:
          type: string
          description: Language of magazine.
        price:
          type: number 
          description: The price of magazine.
        featured:
          type: boolean
          description: flag.
        category:
          type: string
          description: The category of magazine which it belongs to.
        reviews:
          $ref: "#/components/schemas/Reviews"
          description: All reviews of the magazine.
        
      example:
        name: Business world
        image: assets/images/im1.jpg
        language: English
        price: 367
        featured: true
        description: BW Businessworld is an Indian business magazine. The magazine was published by ABP Group, whose most prominent publications are The Telegraph, Anandabazar Patrika, Sananda, Anandamela and others.
        category: business
        reviews: []

    Reviews:
      type: object
      required:
        - itemId
          rating
          review
          author
      properties:
        id:
          type: string 
          description: The auto-generated id of the review.
        itemId:
          type: string
          description: The _id of a newspaper.
        rating:
          type: number
          description: The rating of the newspaper/magazine.
        review:
          type: string
          description: The review given to the newspaper/magazine.  
        author:
          type: string
          description: The author of the newspaper/magazine. 
      example:
        itemId: 624068820c661e32b869e08a
        rating: 4
        review: Nice newspaper with lots of new information 
        author: Saritha
  
    User:
      type: object
      required:
        - username
        - password
      properties:
        id:
          type: string
          description: The auto-generated id of the user.
        username:
          type: string
          description: Username of user.
        password:
          type: string
          description: Password of user.
        admin:
          type: boolean
          description: True if user is also an admin.
                
      example:
        username: Bhanu
        password : xxx
        admin : True
  
    Orders:
      type: object
      required:
        - fullName
        - address
        - city
        - postalCode
        - country
        - NameOnCard
        - CreditCardNum
        - ExpMon
        - ExpYear
        - Cvv
        - cart
        - user
        - price  
      properties:
        id:
          type: string    
          description: The auto-generated id of the order.
        fullName:
          type: string
          description: The name of the user placing order.
        address:
          type: string
          description: The address of user.
        city:
          type: string
          description: City where user resites.
        postalCode:
          type: number
          description: postal code of user's place.
        country:
          type: string
          description: country of user.
        NameOnCard:
          type: string
          description: name on credit card or debit card.
        CreditCardNum:
          type: string
          description: Number of credit card/debit card.
        ExpMon:
          type: number 
          description: expiry month of credit/debit card.
        ExpYear:
          type: number
          description: expiry year credit card or debit card.
        Cvv:
          type: number
          description: Cvv of Credit/debit card.          
        cart:
          $ref: "#/components/schemas/Cart"
          description: Cart items before placing order.
        -user:
          type: string
          description: name of user.
        -price:
          type: number
          description: price of total items.  
        -items :
          type : number
          description : total number of items
        -date :
          type : string
          description : date on which order placed
   
      example:
       
        fullName : samhitha
        address : sbi colony 6th line
        city : pulivendula
        postalCode : 516390
        country : India
        NameOnCard : samhitha bhumireddy
        CreditCardNum : 1234 8754 3459 0982
        ExpMon : 09
        ExpYear : 2023
        Cvv : 143
        cart : []
        user : samhitha
        price : 1500
        items : 3
        date : 2022-01-06T13:32:50.516Z

    Cart:
      type: object
      required:
        - name
        - image
        - language
        - price
        - description
        - qty

      properties:
        id:
          type: string 
          description: The auto-generated id of the cart item.
        name:
          type: string
          description: The name of the magazine/newspaper.
        image:
          type: string
          description: Url of the image of magazine/newspaper.
        language:
          type: string
          description: Language of magazine/newspapers.
        price:
          type: number 
          description: The price of magazine/newspaper.      
        description:
          type: string
          description: The details of magazine/newspapers.
        category:
          type: string
          description: The category of magazine which it belongs to null for newspaper.  
        qty:
          type: number
          description: number of items
        
        
        
      example:
        name: Business world
        image: assets/images/im1.jpg
        language: English
        price: 367
        description: BW Businessworld is an Indian business magazine. The magazine was published by ABP Group, whose most prominent publications are The Telegraph, Anandabazar Patrika, Sananda, Anandamela and others.
        category: business
        qty : 3
   
    Blog:
      type: object
      required:
        - user
        - title
        - message
      properties: 
        id: 
          type: string
          description: The auto-generated id of the Blog.
        user:
          type: string
          description: Username of user.
        title:
          type: string
          description: Topic of blog.
        message:
          type: string
          description: Writes blog.
                
      example:
        user: Swetha
        title: REST
        message: A REST API (also known as RESTful API) is an application programming interface (API or web API) that conforms to the constraints of REST. 

    Feedback:
      type: object
      required:
        - firstname
        - lastname
        - telnum
        - email
        - contactType    
        - message
      properties:
        id:
          type: string 
          description: The auto-generated id of the feedback.
        firstname:
          type: string
          description: First name of user.
        lastname:
          type: string
          description: Last name of user.
        telnum:
          type: string
          description: Contact number of user.
        email:
          type: string
          description: Email of user
        contactType:
          type: string
          description: Contact type preferred by user
        agree: 
          type: boolean
          description: Whether user agree to contact 
        message: 
          type: string
          description: Feedback os user
                
      example:
        firstname: Bhanu
        lastname: Aswitha
        telnum: 1111111111
        email: ab@gmail.com
        contacttype: email
        agree: false
        message: Great website to use
          

    

      


